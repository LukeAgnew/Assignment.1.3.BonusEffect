


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             BonusEffect, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 IMPORT           getPicAddr
    4 00000000                 IMPORT           putPic
    5 00000000                 IMPORT           getPicWidth
    6 00000000                 IMPORT           getPicHeight
    7 00000000                 EXPORT           start
    8 00000000                 PRESERVE8
    9 00000000         
   10 00000000         start
   11 00000000 EBFFFFFE        BL               getPicAddr  ; load the start ad
                                                            dress of the image 
                                                            in R4
   12 00000004 E1A04000        MOV              R4, R0
   13 00000008 EBFFFFFE        BL               getPicHeight ; load the height 
                                                            of the image (rows)
                                                             in R5
   14 0000000C E1A05000        MOV              R5, R0
   15 00000010 EBFFFFFE        BL               getPicWidth ; load the width of
                                                             the image (columns
                                                            ) in R6
   16 00000014 E1A06000        MOV              R6, R0
   17 00000018         
   18 00000018 E1A00004        MOV              R0, R4      ; starting address 
                                                            parameter
   19 0000001C E1A01005        MOV              R1, R5      ; image height para
                                                            meter
   20 00000020 E1A02006        MOV              R2, R6      ; image width param
                                                            eter
   21 00000024 E3A03002        MOV              R3, #2      ; radius of effect 
                                                            parameter
   22 00000028         
   23 00000028         
   24 00000028 E92D000F        STMFD            SP!,{R0-R3} ; save address, hei
                                                            ght, width and radi
                                                            us to the system st
                                                            ack
   25 0000002C         
   26 0000002C EB000002        BL               imageBoxBlur ; invoke imageBoxB
                                                            lur
   27 00000030         
   28 00000030 E8BD000F        LDMFD            SP!,{R0-R3} ; restore address, 
                                                            height, width and r
                                                            adius from the syst
                                                            em stack
   29 00000034         
   30 00000034 EBFFFFFE        BL               putPic      ; re-display the up
                                                            dated image
   31 00000038         
   32 00000038 EAFFFFFE 
                       stop    B                stop
   33 0000003C         
   34 0000003C         ; imageBoxBlur subroutine
   35 0000003C         ; Takes an image and creates a blurred duplicate of that
                        image
   36 0000003C         ; by convolving each pixel using a radius-defined matrix
                         
   37 0000003C         ; parameters R0: starting address of the original image
   38 0000003C         ;    R1: image height



ARM Macro Assembler    Page 2 


   39 0000003C         ;    R2: image width
   40 0000003C         ;    R3: radius
   41 0000003C         imageBoxBlur
   42 0000003C E92D5FF0        STMFD            SP!,{R4-R12,lr} 
                                                            ; save registers
   43 00000040         
   44 00000040 E3A04000        LDR              R4,=0
   45 00000044         fori
   46 00000044 E1540001        CMP              R4,R1       ; for (int i=0; i<h
                                                            eight; i++)
   47 00000048 2A000053        BHS              endfori     ; {
   48 0000004C         
   49 0000004C E1540003        CMP              R4,R3       ; if (i < radius)
   50 00000050 3A00004F        BLO              incrementI  ; { offset i }
   51 00000054         
   52 00000054 E3A05000        LDR              R5,=0
   53 00000058         forj
   54 00000058 E1550002        CMP              R5,R2       ; for (int j=0; j<w
                                                            idth; j++)
   55 0000005C 2A00004C        BHS              endforj     ; {
   56 00000060         
   57 00000060 E1550003        CMP              R5,R3       ; if (j < radius)
   58 00000064 3A000048        BLO              incrementJ  ; { offset j }
   59 00000068         
   60 00000068 E3A09000        MOV              R9,#0       ; redTotal = 0
   61 0000006C E3A0A000        MOV              R10,#0      ; greenTotal = 0
   62 00000070 E3A0B000        MOV              R11,#0      ; blueTotal = 0
   63 00000074 E3A0C000        MOV              R12,#0      ; pixelCount = 0
   64 00000078         
   65 00000078 E0446003        SUB              R6,R4,R3    ; channeli = i-radi
                                                            us
   66 0000007C         
   67 0000007C E0848003        ADD              R8,R4,R3    ; channeliLength = 
                                                            i+radius
   68 00000080         forChanneli
   69 00000080 E1560008        CMP              R6,R8       ; for (channeli; ch
                                                            anneli<channeliLeng
                                                            th; channeli++)
   70 00000084 CA000022        BGT              endforChanneli ; {
   71 00000088         
   72 00000088 E1560001        CMP              R6,R1       ; if (channeli < he
                                                            ight)
   73 0000008C AA00001B        BGE              endcomputeAverage ; {
   74 00000090         
   75 00000090 E0457003        SUB              R7,R5,R3    ; channelj = j-radi
                                                            us
   76 00000094         
   77 00000094 E0858003        ADD              R8,R5,R3    ; channeljLength = 
                                                            j + radius
   78 00000098         forChannelj
   79 00000098 E1570008        CMP              R7,R8       ; for (channelj; ch
                                                            anneli<channeljLeng
                                                            th; channelj++)
   80 0000009C CA000019        BGT              endforChannelj ; {
   81 000000A0         
   82 000000A0 E1570002        CMP              R7,R2       ; if (channelj < wi
                                                            dth)
   83 000000A4 AA000015        BGE              endcomputeAverage ; {
   84 000000A8         



ARM Macro Assembler    Page 3 


   85 000000A8         computeAverage
   86 000000A8 E92D000F        STMFD            SP!, {R0-R3} ; save address, he
                                                            ight, width and rad
                                                            ius to the system s
                                                            tack
   87 000000AC         
   88 000000AC E1A01006        MOV              R1,R6       ; index i parameter
                                                            
   89 000000B0 E1A03002        MOV              R3,R2       ; width parameter
   90 000000B4 E1A02007        MOV              R2,R7       ; index j parameter
                                                            
   91 000000B8         
   92 000000B8 EB000038        BL               getPixelR   ; invoke getPixelR(
                                                            address, i, j, widt
                                                            h)
   93 000000BC E0899000        ADD              R9,R9,R0    ; redTotal += red c
                                                            omponent
   94 000000C0         
   95 000000C0 E8BD000F        LDMFD            SP!,{R0-R3} ; restore address, 
                                                            height, width and r
                                                            adius from the syst
                                                            em stack
   96 000000C4         
   97 000000C4 E92D000F        STMFD            SP!,{R0-R3} ; save address, hei
                                                            ght, width and radi
                                                            us to the system st
                                                            ack
   98 000000C8         
   99 000000C8 E1A01006        MOV              R1,R6       ; index i parameter
                                                            
  100 000000CC E1A03002        MOV              R3,R2       ; width parameter
  101 000000D0 E1A02007        MOV              R2,R7       ; index j parameter
                                                            
  102 000000D4         
  103 000000D4 EB000037        BL               getPixelG   ; invoke getPixelG(
                                                            address, i, j, widt
                                                            h)
  104 000000D8 E08AA000        ADD              R10,R10,R0  ; greenTotal += gre
                                                            en component
  105 000000DC         
  106 000000DC E8BD000F        LDMFD            SP!,{R0-R3} ; restore address, 
                                                            height, width, and 
                                                            radius from the sys
                                                            tem stack
  107 000000E0         
  108 000000E0 E92D000F        STMFD            SP!,{R0-R3} ; save address, hei
                                                            ght, width and radi
                                                            us to the system st
                                                            ack
  109 000000E4         
  110 000000E4 E1A01006        MOV              R1,R6       ; index i parameter
                                                            
  111 000000E8 E1A03002        MOV              R3,R2       ; width parameter
  112 000000EC E1A02007        MOV              R2,R7       ; index j parameter
                                                            
  113 000000F0         
  114 000000F0 EB000038        BL               getPixelB   ; invoke getPixelB(
                                                            address, i, j, widt
                                                            h)



ARM Macro Assembler    Page 4 


  115 000000F4 E08BB000        ADD              R11,R11,R0  ; blueTotal += blue
                                                             component
  116 000000F8         
  117 000000F8 E8BD000F        LDMFD            SP!,{R0-R3} ; restore address f
                                                            rom the system stac
                                                            k
  118 000000FC         
  119 000000FC E28CC001        ADD              R12,R12,#1  ; pixelCount++
  120 00000100         ; }
  121 00000100         endcomputeAverage                    ; }
  122 00000100         
  123 00000100 E2877001        ADD              R7,R7,#1    ; channelj++
  124 00000104 EAFFFFE3        B                forChannelj ; }
  125 00000108         endforChannelj
  126 00000108 E0848003        ADD              R8,R4,R3    ; channeliLength = 
                                                            i+radius
  127 0000010C E2866001        ADD              R6,R6,#1    ; channeli++
  128 00000110 EAFFFFDA        B                forChanneli ; }
  129 00000114         endforChanneli
  130 00000114         
  131 00000114 E92D0003        STMFD            SP!,{R0-R1} ; store address and
                                                             height to the syst
                                                            em stack
  132 00000118         
  133 00000118 E1A00009        MOV              R0,R9       ; dividend paramete
                                                            r
  134 0000011C E1A0100C        MOV              R1,R12      ; divisor parameter
                                                            
  135 00000120         
  136 00000120 EB000033        BL               divide      ; invoke divide(div
                                                            idend, divisor)
  137 00000124         
  138 00000124 E1A09000        MOV              R9,R0       ; redAverage = quot
                                                            ient
  139 00000128         
  140 00000128 E1A0000A        MOV              R0,R10      ; dividend paramete
                                                            r
  141 0000012C E1A0100C        MOV              R1,R12      ; divisor parameter
                                                            
  142 00000130         
  143 00000130 EB00002F        BL               divide      ; invoke divide(div
                                                            idend, divisor)
  144 00000134         
  145 00000134 E1A0A000        MOV              R10,R0      ; greenAverage = qu
                                                            otient
  146 00000138         
  147 00000138 E1A0000B        MOV              R0,R11      ; dividend paramete
                                                            r
  148 0000013C E1A0100C        MOV              R1,R12      ; divisor parameter
                                                            
  149 00000140         
  150 00000140 EB00002B        BL               divide      ; invoke divide(div
                                                            idend, divisor)
  151 00000144         
  152 00000144 E1A0B000        MOV              R11,R0      ; blueAverage = quo
                                                            tient
  153 00000148         
  154 00000148 E8BD0003        LDMFD            SP!,{R0-R1} ; restore address a
                                                            nd height from the 



ARM Macro Assembler    Page 5 


                                                            system stack
  155 0000014C         
  156 0000014C E92D000F        STMFD            SP!,{R0-R3} ; store address, he
                                                            ight, width and rad
                                                            ius to the system s
                                                            tack
  157 00000150         
  158 00000150 E1A01004        MOV              R1,R4       ; index i parameter
                                                            
  159 00000154 E1A03002        MOV              R3,R2       ; width parameter
  160 00000158 E1A02005        MOV              R2,R5       ; index j parameter
                                                            
  161 0000015C E52D9004        STR              R9, [SP, #-4]! 
                                                            ; value parameter 
  162 00000160         
  163 00000160 EB00002C        BL               setPixelR   ; invoke setPixelR(
                                                            address, i, j, widt
                                                            h, value)
  164 00000164 E28DD004        ADD              SP,SP,#4    ; pop parameter off
                                                             the stack
  165 00000168         
  166 00000168 E1A01004        MOV              R1,R4       ; index i parameter
                                                            
  167 0000016C E52DA004        STR              R10, [SP, #-4]! 
                                                            ; value parameter
  168 00000170         
  169 00000170 EB000032        BL               setPixelG   ; invoke setPixelG(
                                                            address, i, j, widt
                                                            h, value) 
  170 00000174 E28DD004        ADD              SP,SP,#4    ; pop parameter off
                                                             the stack
  171 00000178         
  172 00000178 E1A01004        MOV              R1,R4       ; index i parameter
                                                             
  173 0000017C E52DB004        STR              R11, [SP, #-4]! 
                                                            ; value parameter
  174 00000180         
  175 00000180 EB000038        BL               setPixelB   ; invoke setPixelB(
                                                            address, i, j, widt
                                                            h, value) 
  176 00000184 E28DD004        ADD              SP,SP,#4    ; pop parameter off
                                                             the stack
  177 00000188         
  178 00000188 E8BD000F        LDMFD            SP!,{R0-R3} ; restore address, 
                                                            height, width and r
                                                            adius from the syst
                                                            em stack
  179 0000018C         
  180 0000018C         incrementJ
  181 0000018C E2855001        ADD              R5,R5,#1    ; offset j
  182 00000190 EAFFFFB0        B                forj        ; }
  183 00000194         endforj
  184 00000194         
  185 00000194         incrementI
  186 00000194 E2844001        ADD              R4,R4,#1    ; offset i
  187 00000198 EAFFFFA9        B                fori        ; }
  188 0000019C         endfori
  189 0000019C         
  190 0000019C E8BD9FF0        LDMFD            SP!, {R4-R12,pc} 



ARM Macro Assembler    Page 6 


                                                            ; restore registers
                                                            
  191 000001A0         
  192 000001A0         
  193 000001A0         ; getPixelR subroutine
  194 000001A0         ; Retrieves the Red color component of a specified pixel
                       
  195 000001A0         ; from a two-dimensional array of pixels.
  196 000001A0         ; parameters R0: starting address of the array
  197 000001A0         ;    R1: index i of the pixel
  198 000001A0         ;    R2: index j of the pixel
  199 000001A0         ;    R3: width of the array
  200 000001A0         
  201 000001A0         getPixelR
  202 000001A0 E92D4010        STMFD            SP!, {R4, lr} ; save registers
  203 000001A4         
  204 000001A4 E0010193        MUL              R1,R3,R1    ; row * rowSize    
                                                              
  205 000001A8 E0811002        ADD              R1,R1,R2    ; row*rowSize + col
                                                            umn 
  206 000001AC         
  207 000001AC E7900101        LDR              R0, [R0, R1, LSL #2] ; pixel = 
                                                            Memory.Word[address
                                                             + (index * 4)]
  208 000001B0 E1A00820        MOV              R0,R0, LSR #16 ; redComponent =
                                                             pixel shifted righ
                                                            t by 16 bits
  209 000001B4         
  210 000001B4 E8BD8010        LDMFD            SP!, {R4, PC} 
                                                            ; restore registers
                                                            
  211 000001B8         
  212 000001B8         
  213 000001B8         ; getPixelG subroutine
  214 000001B8         ; Retrieves the Green color component of a specified pix
                       el
  215 000001B8         ; from a two-dimensional array of pixels.
  216 000001B8         ; parameters R0: starting address of the array
  217 000001B8         ;    R1: index i of the pixel
  218 000001B8         ;    R2: index j of the pixel
  219 000001B8         ;    R3: width of the array
  220 000001B8         
  221 000001B8         getPixelG
  222 000001B8 E92D4010        STMFD            SP!, {R4, lr} ; save registers
  223 000001BC         
  224 000001BC E0010193        MUL              R1,R3,R1    ; row * rowSize    
                                                              
  225 000001C0 E0811002        ADD              R1,R1,R2    ; row*rowSize + col
                                                            umn 
  226 000001C4         
  227 000001C4 E7900101        LDR              R0, [R0, R1, LSL #2] ; pixel = 
                                                            Memory.Word[address
                                                             + (index * 4)]
  228 000001C8 E1A00420        MOV              R0,R0,LSR #8 ; greenComponent =
                                                             pixel shifted righ
                                                            t by 8 bits and
  229 000001CC E59F40B8        LDR              R4,=0xFFFFFF00 ; combined with 
                                                            a mask to clear the
                                                             redComponent value



ARM Macro Assembler    Page 7 


                                                            
  230 000001D0 E1C00004        BIC              R0,R0,R4
  231 000001D4         
  232 000001D4 E8BD8010        LDMFD            SP!, {R4,PC} 
                                                            ; restore registers
                                                            
  233 000001D8         
  234 000001D8         
  235 000001D8         ; getPixelB subroutine
  236 000001D8         ; Retrieves the Blue color component of a specified pixe
                       l
  237 000001D8         ; from a two-dimensional array of pixels.
  238 000001D8         ; parameters R0: starting address of the array
  239 000001D8         ;    R1: index i of the pixel
  240 000001D8         ;    R2: index j of the pixel
  241 000001D8         ;    R3: width of the array
  242 000001D8         
  243 000001D8         getPixelB
  244 000001D8 E92D4010        STMFD            SP!, {R4, lr} ; save registers
  245 000001DC         
  246 000001DC E0010193        MUL              R1,R3,R1    ; row * rowSize    
                                                              
  247 000001E0 E0811002        ADD              R1,R1,R2    ; row*rowSize + col
                                                            umn 
  248 000001E4         
  249 000001E4 E7900101        LDR              R0, [R0, R1, LSL #2] ; pixel = 
                                                            Memory.Word[address
                                                             + (index * 4)]
  250 000001E8 E59F409C        LDR              R4,=0xFFFFFF00 ; blueComponent 
                                                            = pixel combined wi
                                                            th a mask to clear
  251 000001EC E1C00004        BIC              R0,R0,R4    ; the redComponent 
                                                            and greenComponent 
                                                            values
  252 000001F0         
  253 000001F0 E8BD8010        LDMFD            SP!, {R4,PC} 
                                                            ; restore registers
                                                            
  254 000001F4         
  255 000001F4         
  256 000001F4         ; divide subroutine
  257 000001F4         ; Takes a number (the dividend) and divides it by anothe
                       r number (the divisor) and
  258 000001F4         ; then returns the result (the quotient)
  259 000001F4         ; parameters   R0: The dividend, i.e. the number to be d
                       ivided
  260 000001F4         ;      R1: The divisor, i.e. the number to divide into t
                       he dividend
  261 000001F4         ; return value R0: quotient
  262 000001F4         
  263 000001F4         divide
  264 000001F4 E92D4010        STMFD            sp!, {R4, lr} ; save registers
  265 000001F8 E3A04000        MOV              R4,#0       ; quotient = 0
  266 000001FC E1500001 
                       wh      CMP              R0, R1      ; while (dividend >
                                                             divisor)
  267 00000200 3A000002        BLO              endwh       ; {
  268 00000204 E0400001        SUB              R0, R0, R1  ; dividend = divide
                                                            nd - divisor



ARM Macro Assembler    Page 8 


  269 00000208 E2844001        ADD              R4,R4,#1    ; quotient = quotie
                                                            nt + 1
  270 0000020C EAFFFFFA        B                wh          ; }
  271 00000210         endwh
  272 00000210 E1A00004        MOV              R0,R4       ; return value = qu
                                                            otient
  273 00000214 E8BD8010        LDMFD            sp!, {R4, pc} 
                                                            ; restore registers
                                                            
  274 00000218         
  275 00000218         
  276 00000218         ; setPixelR subroutine
  277 00000218         ; Sets the Red color component of a specified pixel in a
                       
  278 00000218         ; two-dimensional array of pixels.
  279 00000218         ; parameters R0: starting address of the array
  280 00000218         ;    R1: index i of pixel
  281 00000218         ;    R2: index j of pixel
  282 00000218         ;    R3: width of the array
  283 00000218         ;      [SP]: value added to the stack
  284 00000218         setPixelR
  285 00000218 E92D4030        STMFD            SP!, {R4-R5, lr} 
                                                            ; save registers
  286 0000021C         
  287 0000021C E0010193        MUL              R1,R3,R1    ; row * rowSize
  288 00000220 E0811002        ADD              R1,R1,R2    ; row*rowSize + col
                                                            umn
  289 00000224         
  290 00000224 E7904101        LDR              R4,[R0, R1, LSL #2] ; pixel = M
                                                            emory.Word[address 
                                                            + (index*4)]
  291 00000228         
  292 00000228 E3C448FF        BIC              R4,R4,#0x00FF0000 ; clear the p
                                                            ixel's current redC
                                                            omponent value
  293 0000022C         
  294 0000022C E59D500C        LDR              R5,[SP, #0 + 12] ; load the red
                                                            Component value fro
                                                            m the stack
  295 00000230 E1A05805        MOV              R5,R5,LSL #16 ; shift redCompon
                                                            ent value left by 1
                                                            6 bits
  296 00000234         
  297 00000234 E0844005        ADD              R4,R4,R5    ; add this redCompo
                                                            nent value to the p
                                                            ixel
  298 00000238         
  299 00000238 E7804101        STR              R4, [R0, R1, LSL #2] ; Memory.W
                                                            ord[address + (inde
                                                            x*4)] = pixel
  300 0000023C         
  301 0000023C E8BD8030        LDMFD            SP!, {R4-R5, pc} 
                                                            ; restore registers
                                                            
  302 00000240         
  303 00000240         
  304 00000240         ; setPixelG subroutine
  305 00000240         ; Sets the Green color component of a specified pixel in
                        a



ARM Macro Assembler    Page 9 


  306 00000240         ; two-dimensional array of pixels.
  307 00000240         ; parameters R0: starting address of the array
  308 00000240         ;    R1: index i of pixel
  309 00000240         ;    R2: index j of pixel
  310 00000240         ;    R3: width of the array
  311 00000240         ;      [SP]: value added to the stack
  312 00000240         setPixelG
  313 00000240 E92D4030        STMFD            SP!, {R4-R5, lr} 
                                                            ; save registers
  314 00000244         
  315 00000244 E0010193        MUL              R1,R3,R1    ; row * rowSize
  316 00000248 E0811002        ADD              R1,R1,R2    ; row*rowSize + col
                                                            umn
  317 0000024C         
  318 0000024C E7904101        LDR              R4,[R0, R1, LSL #2] ; pixel = M
                                                            emory.Word[address 
                                                            + (index*4)]
  319 00000250         
  320 00000250 E3C44CFF        BIC              R4,R4,#0x0000FF00 ; clear the p
                                                            ixel's current gree
                                                            nComponent value
  321 00000254         
  322 00000254 E59D500C        LDR              R5,[SP, #0 + 12] ; load the gre
                                                            enComponent value f
                                                            rom the stack 
  323 00000258 E1A05405        MOV              R5,R5,LSL #8 ; shift the greenC
                                                            omponent value left
                                                             by 8 bits
  324 0000025C         
  325 0000025C E0844005        ADD              R4,R4,R5    ; add this greenCom
                                                            ponent value to the
                                                             pixel
  326 00000260         
  327 00000260 E7804101        STR              R4, [R0, R1, LSL #2] ; Memory.W
                                                            ord[address + (inde
                                                            x*4)] = pixel
  328 00000264         
  329 00000264 E8BD8030        LDMFD            SP!, {R4-R5, pc} 
                                                            ; restore registers
                                                            
  330 00000268         
  331 00000268         
  332 00000268         ; setPixelB subroutine
  333 00000268         ; Sets the Blue color component of a specified pixel in 
                       a
  334 00000268         ; two-dimensional array of pixels.
  335 00000268         ; parameters R0: starting address of the array
  336 00000268         ;    R1: index i of pixel
  337 00000268         ;    R2: index j of pixel
  338 00000268         ;    R3: width of the array
  339 00000268         ;      [SP]: value added to the stack
  340 00000268         setPixelB
  341 00000268 E92D4030        STMFD            SP!, {R4-R5, lr} 
                                                            ; save registers
  342 0000026C         
  343 0000026C E0010193        MUL              R1,R3,R1    ; row * rowSize
  344 00000270 E0811002        ADD              R1,R1,R2    ; row*rowSize + col
                                                            umn
  345 00000274         



ARM Macro Assembler    Page 10 


  346 00000274 E7904101        LDR              R4,[R0, R1, LSL #2] ; pixel = M
                                                            emory.Word[address 
                                                            + (index*4)]
  347 00000278         
  348 00000278 E3C440FF        BIC              R4,R4,#0x000000FF ; clear the p
                                                            ixel's current blue
                                                            Component value
  349 0000027C         
  350 0000027C E59D500C        LDR              R5,[SP, #0 + 12] ; load the blu
                                                            eComponent value fr
                                                            om the system stack
                                                            
  351 00000280         
  352 00000280 E0844005        ADD              R4,R4,R5    ; add this blueComp
                                                            onent value to the 
                                                            pixel
  353 00000284         
  354 00000284 E7804101        STR              R4, [R0, R1, LSL #2] ; Memory.W
                                                            ord[address + (addr
                                                            ess*4)] = pixel
  355 00000288         
  356 00000288 E8BD8030        LDMFD            SP!, {R4-R5, pc} 
                                                            ; restore registers
                                                            
  357 0000028C         
  358 0000028C                 END
              FFFFFF00 
Command Line: --debug --xref --apcs=interwork --depend=BonusEffect.d -oBonusEff
ect.o -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\Philips --predefine="__EVAL SETA 1" -
-predefine="__MICROLIB SETA 1" --predefine="NO_CLOCK_SETUP SETA 1" --predefine=
"NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC SETA 1" --predefine="RAM_MODE SET
A 1" --predefine="REMAP SETA 1" --list=BonusEffect.lst BonusEffect.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

BonusEffect 00000000

Symbol: BonusEffect
   Definitions
      At line 1 in file BonusEffect.s
   Uses
      None
Comment: BonusEffect unused
computeAverage 000000A8

Symbol: computeAverage
   Definitions
      At line 85 in file BonusEffect.s
   Uses
      None
Comment: computeAverage unused
divide 000001F4

Symbol: divide
   Definitions
      At line 263 in file BonusEffect.s
   Uses
      At line 136 in file BonusEffect.s
      At line 143 in file BonusEffect.s
      At line 150 in file BonusEffect.s

endcomputeAverage 00000100

Symbol: endcomputeAverage
   Definitions
      At line 121 in file BonusEffect.s
   Uses
      At line 73 in file BonusEffect.s
      At line 83 in file BonusEffect.s

endforChanneli 00000114

Symbol: endforChanneli
   Definitions
      At line 129 in file BonusEffect.s
   Uses
      At line 70 in file BonusEffect.s
Comment: endforChanneli used once
endforChannelj 00000108

Symbol: endforChannelj
   Definitions
      At line 125 in file BonusEffect.s
   Uses
      At line 80 in file BonusEffect.s
Comment: endforChannelj used once
endfori 0000019C

Symbol: endfori
   Definitions
      At line 188 in file BonusEffect.s
   Uses
      At line 47 in file BonusEffect.s
Comment: endfori used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

endforj 00000194

Symbol: endforj
   Definitions
      At line 183 in file BonusEffect.s
   Uses
      At line 55 in file BonusEffect.s
Comment: endforj used once
endwh 00000210

Symbol: endwh
   Definitions
      At line 271 in file BonusEffect.s
   Uses
      At line 267 in file BonusEffect.s
Comment: endwh used once
forChanneli 00000080

Symbol: forChanneli
   Definitions
      At line 68 in file BonusEffect.s
   Uses
      At line 128 in file BonusEffect.s
Comment: forChanneli used once
forChannelj 00000098

Symbol: forChannelj
   Definitions
      At line 78 in file BonusEffect.s
   Uses
      At line 124 in file BonusEffect.s
Comment: forChannelj used once
fori 00000044

Symbol: fori
   Definitions
      At line 45 in file BonusEffect.s
   Uses
      At line 187 in file BonusEffect.s
Comment: fori used once
forj 00000058

Symbol: forj
   Definitions
      At line 53 in file BonusEffect.s
   Uses
      At line 182 in file BonusEffect.s
Comment: forj used once
getPixelB 000001D8

Symbol: getPixelB
   Definitions
      At line 243 in file BonusEffect.s
   Uses
      At line 114 in file BonusEffect.s
Comment: getPixelB used once
getPixelG 000001B8

Symbol: getPixelG



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 221 in file BonusEffect.s
   Uses
      At line 103 in file BonusEffect.s
Comment: getPixelG used once
getPixelR 000001A0

Symbol: getPixelR
   Definitions
      At line 201 in file BonusEffect.s
   Uses
      At line 92 in file BonusEffect.s
Comment: getPixelR used once
imageBoxBlur 0000003C

Symbol: imageBoxBlur
   Definitions
      At line 41 in file BonusEffect.s
   Uses
      At line 26 in file BonusEffect.s
Comment: imageBoxBlur used once
incrementI 00000194

Symbol: incrementI
   Definitions
      At line 185 in file BonusEffect.s
   Uses
      At line 50 in file BonusEffect.s
Comment: incrementI used once
incrementJ 0000018C

Symbol: incrementJ
   Definitions
      At line 180 in file BonusEffect.s
   Uses
      At line 58 in file BonusEffect.s
Comment: incrementJ used once
setPixelB 00000268

Symbol: setPixelB
   Definitions
      At line 340 in file BonusEffect.s
   Uses
      At line 175 in file BonusEffect.s
Comment: setPixelB used once
setPixelG 00000240

Symbol: setPixelG
   Definitions
      At line 312 in file BonusEffect.s
   Uses
      At line 169 in file BonusEffect.s
Comment: setPixelG used once
setPixelR 00000218

Symbol: setPixelR
   Definitions
      At line 284 in file BonusEffect.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 163 in file BonusEffect.s
Comment: setPixelR used once
start 00000000

Symbol: start
   Definitions
      At line 10 in file BonusEffect.s
   Uses
      At line 7 in file BonusEffect.s
Comment: start used once
stop 00000038

Symbol: stop
   Definitions
      At line 32 in file BonusEffect.s
   Uses
      At line 32 in file BonusEffect.s
Comment: stop used once
wh 000001FC

Symbol: wh
   Definitions
      At line 266 in file BonusEffect.s
   Uses
      At line 270 in file BonusEffect.s
Comment: wh used once
25 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getPicAddr 00000000

Symbol: getPicAddr
   Definitions
      At line 3 in file BonusEffect.s
   Uses
      At line 11 in file BonusEffect.s
Comment: getPicAddr used once
getPicHeight 00000000

Symbol: getPicHeight
   Definitions
      At line 6 in file BonusEffect.s
   Uses
      At line 13 in file BonusEffect.s
Comment: getPicHeight used once
getPicWidth 00000000

Symbol: getPicWidth
   Definitions
      At line 5 in file BonusEffect.s
   Uses
      At line 15 in file BonusEffect.s
Comment: getPicWidth used once
main 00000000

Symbol: main
   Definitions
      At line 2 in file BonusEffect.s
   Uses
      None
Comment: main unused
putPic 00000000

Symbol: putPic
   Definitions
      At line 4 in file BonusEffect.s
   Uses
      At line 30 in file BonusEffect.s
Comment: putPic used once
5 symbols
363 symbols in table
